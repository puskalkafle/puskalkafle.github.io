{"ast":null,"code":"var _jsxFileName = \"/Users/puskal/Documents/Web_Development/puskalkafle.github.io/source/components/common/Icon.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Icon = props => {\n  const {\n    icon,\n    color\n  } = props;\n  return __jsx(StyledIcon, _extends({}, props, {\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }), icon);\n};\n\nconst StyledIcon = styled.i.withConfig({\n  displayName: \"Icon__StyledIcon\",\n  componentId: \"sc-1mf20ri-0\"\n})([\"color:\", \";svg{height:1em;width:1em;fill:currentColor;}\"], props => props.color ? props.color : ({\n  theme\n}) => theme.colors.white);\nexport default Icon;","map":{"version":3,"sources":["/Users/puskal/Documents/Web_Development/puskalkafle.github.io/source/components/common/Icon.tsx"],"names":["React","styled","Icon","props","icon","color","StyledIcon","i","theme","colors","white"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAOA,MAAMC,IAAqB,GAAIC,KAAD,IAAW;AACvC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,KAAxB;AACA,SACE,MAAC,UAAD,eAAgBA,KAAhB;AAAuB,IAAA,KAAK,EAAEE,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,IADH,CADF;AAKD,CAPD;;AAaA,MAAME,UAAU,GAAGL,MAAM,CAACM,CAAV;AAAA;AAAA;AAAA,gEACJJ,KAAD,IACPA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4B,CAAC;AAAEG,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,KAF5C,CAAhB;AAUA,eAAeR,IAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  icon: any;\n  color?: string;\n}\n\nconst Icon: React.FC<Props> = (props) => {\n  const { icon, color } = props;\n  return (\n    <StyledIcon {...props} color={color}>\n      {icon}\n    </StyledIcon>\n  );\n};\n\ninterface StyledProps {\n  color?: string;\n}\n\nconst StyledIcon = styled.i`\n  color: ${(props: StyledProps) =>\n    props.color ? props.color : ({ theme }) => theme.colors.white};\n\n  svg {\n    height: 1em;\n    width: 1em;\n    fill: currentColor;\n  }\n`;\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}